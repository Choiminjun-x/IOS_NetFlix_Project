//
//  BookMarkViewController.swift
//  cleanSwift
//
//  Created by 최민준(Minjun Choi) on 2021/08/25.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxCocoa
import RxSwift

struct Result {
    var id: Int?
    var posterURL: String?
    var title: String?
}

protocol BookMarkDisplayLogic: AnyObject { }

class BookMarkViewController: UIViewController, BookMarkDisplayLogic {
    
    var interactor: BookMarkBusinessLogic?
    var router: (NSObjectProtocol & BookMarkRoutingLogic & BookMarkDataPassing)?
    //MARK: - Properties
    private let pageView: BookMarkView = .init()
    //여기에 객체로 가져온 값을 넣는다
    var results: [Result]? = []
    
    private let disposeBag: DisposeBag = .init()
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    //MARK: - Setup
    private func setup() {
        let viewController = self
        let interactor = BookMarkInteractor()
        let presenter = BookMarkPresenter()
        let router = BookMarkRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View lifecycle
    override func loadView() {
        self.view = self.pageView
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.navigationConf()
        self.tapEvent()
    }
    
    //MARK: - Page Event
    func tapEvent() {
        self.pageView.bookMarkListCellTapEvent
            .subscribe(onNext: { index in
                self.router?.routeToBookMarkDetail(index: index)
            }).disposed(by: self.disposeBag)
    }
    
    //MARK: - View Method
    private func navigationConf() {
        self.navigationItem.title = "내가 찜한 콘텐츠"
    }
    
    //MARK: - Alert Event
    //성공 알림
    func makeSuccessAlert() {
        let alert = UIAlertController(title: "성공", message: "즐겨찾기 등록 완료!", preferredStyle: UIAlertController.Style.alert)
        let okAction = UIAlertAction(title: "OK", style: .default) { (action) in
        }
        alert.addAction(okAction)
        present(alert, animated: true)
    }
    
    func makeFailureAlert() {
        let alert = UIAlertController(title: "실패", message: "이미 등록되었습니다.", preferredStyle: UIAlertController.Style.alert)
        let okAction = UIAlertAction(title: "OK", style: .default) { (action) in
        }
        alert.addAction(okAction)
        present(alert, animated: true)
    }
    
    internal func notificationEvent() {
        NotificationCenter.default
            .addObserver(self, selector: #selector(self.makeCellModels), name: NSNotification.Name(rawValue: "favoriteBtnContextMenuClick"), object: nil)
        NotificationCenter.default
            .addObserver(self, selector: #selector(self.makeCellModels), name: NSNotification.Name(rawValue: "popularListContextMenuClick"), object: nil)
        NotificationCenter.default
            .addObserver(self, selector: #selector(self.makeCellModels), name: NSNotification.Name(rawValue: "nowplayingListContextMenuClick"), object: nil)
        NotificationCenter.default
            .addObserver(self, selector: #selector(self.makeCellModels), name: NSNotification.Name(rawValue: "topratedListContextMenuClick"), object: nil)
        NotificationCenter.default
            .addObserver(self, selector: #selector(self.makeCellModels), name: NSNotification.Name(rawValue: "upcomingListContextMenuClick"), object: nil)
    }
    
    @objc private func makeCellModels() {
        //여기서 results의 id와 들어오는 id 비교 필요 !
        if let count = results?.filter({$0.id == BookMarkInfo.shared.id}).count, count == 0 {
            self.results?.append(Result(id: BookMarkInfo.shared.id, posterURL: BookMarkInfo.shared.posterURL, title: BookMarkInfo.shared.title))
            //여기서 id를 뗀다
            let cellModels: [BookMarkListCellModel] = results?.compactMap {
                guard let path = $0.posterURL else { return nil }
                guard let title = $0.title else { return nil }
                return .init(imageURL: path, title: title)
            } ?? []
            //TableView에서 view를 띄어주기 위한 display method
            self.displayBookMarkList(cellModels: cellModels)
            self.makeSuccessAlert()
        }
        else { //이미 즐겨찾기 등록이 되어있는 경우
            self.makeFailureAlert()
        }
    }
    
    func displayBookMarkList(cellModels: [BookMarkListCellModel]) {
        self.pageView.displayBookMarkList(cellModel: cellModels)
    }
}
