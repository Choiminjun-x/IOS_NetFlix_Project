//
//  DetailInteractor.swift
//  cleanSwift
//
//  Created by 최민준(Minjun Choi) on 2021/08/03.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol DetailBusinessLogic {
    func requestMovieDetail(request: Detail.RequestMovieDetail.Request)
}

protocol DetailDataStore {
    var movieId: Int? { get set}
    var apiType: Int? { get set }
    var isSearchNavibar: Bool { get set }
}

class DetailInteractor: DetailBusinessLogic, DetailDataStore {
    
    //MARK: - Properties
    var presenter: DetailPresentationLogic?
    let worker: DetailWorker = .init()
    
    var movieId: Int?
    //apiType 0 = popular
    //apiType 1 = nowplaying
    //apiType 2 = toprated
    //apiType 3 = upcoming
    var apiType: Int?
    let imageResourceUrl: String = "https://image.tmdb.org/t/p/original"
    var isSearchNavibar: Bool = false
    
    //MARK: - requestDetailList
    func requestMovieDetail(request: Detail.RequestMovieDetail.Request){
        var disposable: Disposable?
        disposable = self.worker.requestMovieDetail(MovieId: movieId ?? 0)
            .subscribe(onSuccess: { dto in
                disposable?.dispose()
                self.presenter?.presentMovieDetail(response: .init(dto: dto, baseURL: self.imageResourceUrl, apiType: self.apiType ?? 0))
            },
            onFailure: { error in
                disposable?.dispose()
            })
        
    }
}
