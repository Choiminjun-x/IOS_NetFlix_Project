//
//  MainInteractor.swift
//  cleanSwift
//
//  Created by 최민준(Minjun Choi) on 2021/07/28.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol MainBusinessLogic {
    func requestPopularList(request: Main.RequestPopularList.Request)
    func requestNowPlayingList(requset: Main.RequestNowPlayingList.Request)
    func requestTopRatedList(request: Main.RequestTopRatedList.Request)
    func requestUpComingList(request: Main.RequestUpComingList.Request)
}

protocol MainDataStore {
    var mainBannerResultList: [MoviePopularListDto.Result]? { get }
    var popularResultList: [MoviePopularListDto.Result]? { get }
    var nowplayingResultList: [MovieNowPlayingListDto.Results]? { get }
    var topratedResultList: [MovieTopRatedListDto.Result]? { get }
    var upcomingResultList: [MovieUpComingListDto.Results]? { get }
    
    var imageResourceUrl: String { get }
}

class MainInteractor: MainBusinessLogic, MainDataStore
{
    //MARK: - Properties
    var presenter: MainPresentationLogic?
    let worker: MainWorker = .init()
   
    var mainBannerResultList: [MoviePopularListDto.Result]?
    var popularResultList: [MoviePopularListDto.Result]?
    var nowplayingResultList: [MovieNowPlayingListDto.Results]?
    var topratedResultList: [MovieTopRatedListDto.Result]?
    var upcomingResultList: [MovieUpComingListDto.Results]?
    
    let imageResourceUrl: String = "https://image.tmdb.org/t/p/original"
    
    var popularListPageNum: Int = 1
    var nowplayingListPageNum: Int = 1
    var topratedListPageNum: Int = 1
    var upcomingListPageNum: Int = 1

    //MARK: - requestMovieList
    func requestPopularList(request: Main.RequestPopularList.Request) {
        switch request.pageType { //페이징 -> 페이지 타입을 내려받아 구분
        case .first:
            self.popularListPageNum = 1
            self.popularResultList = []
            //메인 배너 사진으로 활용할 사진 리스트 저장 용도
            self.mainBannerResultList = []
        case .next:
            self.popularListPageNum += 1
        }
        var disposable: Disposable?
        disposable = self.worker.requestPopularList(pageNum: popularListPageNum)
            .subscribe(
                onSuccess: { dto in
                    disposable?.dispose() //등록해 놓은 observable 해제를 위해 -> 해제하지 않으면 메모리 누수 발생
                    self.mainBannerResultList?.removeAll() //계속해서 들어오는 이미지 리셋을 위해서 -> 메인 배너 사진 배열 초기화
                    self.mainBannerResultList?.append(contentsOf: dto.results ?? [])
                    self.popularResultList?.append(contentsOf: dto.results ?? [])
                    self.presenter?.presentPopularList(response: .init(
                        imgResourceUrl: self.imageResourceUrl,
                        dto: dto
                    ))
                },
                onFailure: { error in
                    disposable?.dispose()
                })
    }
    
    func requestNowPlayingList(requset: Main.RequestNowPlayingList.Request) {
        switch requset.pageType {
        case .first:
            self.nowplayingListPageNum = 1
            self.nowplayingResultList = []
        case .next:
            self.nowplayingListPageNum += 1
        }
        var disposable: Disposable?
        disposable = self.worker.requestNowPlayingList(pageNum: nowplayingListPageNum)
            .subscribe(
                onSuccess: { dto in
                    disposable?.dispose()
                    self.nowplayingResultList?.append(contentsOf: dto.results ?? [])
                    self.presenter?.presentNowPlayingList(response: .init(
                        imgResourceUrl: self.imageResourceUrl,
                        dto: dto
                    ))
                },
                onFailure: { error in
                    disposable?.dispose()
                })
    }
    
    func requestTopRatedList(request: Main.RequestTopRatedList.Request){
        switch request.pageType {
        case .first:
            self.topratedListPageNum = 1
            self.topratedResultList = []
        case .next:
            self.topratedListPageNum += 1
        }
        var disposable: Disposable?
        disposable = self.worker.requestTopRatedList(pageNum: topratedListPageNum)
            .subscribe(
                onSuccess: { dto in
                    disposable?.dispose()
                    self.topratedResultList?.append(contentsOf: dto.results ?? [])
                    self.presenter?.presentTopRatedList(response: .init(
                        imgResourceUrl: self.imageResourceUrl,
                        dto: dto
                    ))
                },
                onFailure: { error in
                    disposable?.dispose()
                })
    }
    
    func requestUpComingList(request: Main.RequestUpComingList.Request){
        switch request.pageType {
        case .first:
            self.upcomingListPageNum = 1
            self.upcomingResultList = []
        case .next:
            self.upcomingListPageNum += 1
        }
        var disposable: Disposable?
        disposable = self.worker.requestUpComingList(pageNum: upcomingListPageNum)
            .subscribe(
                onSuccess: { dto in
                    disposable?.dispose()
                    self.upcomingResultList?.append(contentsOf: dto.results ?? [])
                    self.presenter?.presentUpComingList(response: .init(
                        imgResourceUrl: self.imageResourceUrl,
                        dto: dto
                    ))
                },
                onFailure: { error in
                    disposable?.dispose()
                })
    }
}

