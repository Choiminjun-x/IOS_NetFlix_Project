//
//  MainViewController.swift
//  cleanSwift
//
//  Created by 최민준(Minjun Choi) on 2021/07/28.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol MainDisplayLogic: AnyObject {
    func displayPopularList(viewModel: Main.RequestPopularList.ViewModel)
    func displayNowPlayingList(viewModel: Main.RequestNowPlayingList.ViewModel)
    func displayTopRatedList(viewModel: Main.RequestTopRatedList.ViewModel)
    func displayUpComingList(viewModel: Main.RequestUpComingList.ViewModel)
    func mainBannerBookMarkList(model: [BookMarkInfoModel])
    func popularBookMarkList(model: [BookMarkInfoModel])
    func nowplayingBookMarkList(model: [BookMarkInfoModel])
    func topratedBookMarkList(model: [BookMarkInfoModel])
    func upcomingBookMarkList(model: [BookMarkInfoModel])
}

class MainViewController: UIViewController, MainDisplayLogic {
    
    var pageView: MainPageView { self.view as! MainPageView }
    
    //MARK: - Properties
    var interactor: MainBusinessLogic?
    var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
    
    private let imageView: UIImageView = .init()
    
    var popularModel: [BookMarkInfoModel] = []
    var nowplayingModel: [BookMarkInfoModel] = []
    var topratedModel: [BookMarkInfoModel] = []
    var upcomingModel: [BookMarkInfoModel] = []
    var mainModel: [BookMarkInfoModel] = []
    
    let disposeBag: DisposeBag = .init()
    
    // MARK: - Object lifecycle
    public required init() {
        super.init(nibName: nil, bundle: nil)
        self.setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        return nil
    }
    
    // MARK: - Setup
    private func setup() {
        let viewController = self
        let interactor = MainInteractor()
        let presenter = MainPresenter()
        let router = MainRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View lifecycle
    override func loadView() {
        self.view = MainView.create()
        self.pageEvent()
        self.bookMarkEvent()
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.requestAPI()
        self.navigationController?.navigationBar.setBackgroundImage(UIImage(), for: .default)
        self.navigationController?.navigationBar.shadowImage = UIImage()
        self.navigationController?.navigationBar.isTranslucent = true
        self.navigationController?.view.backgroundColor = .clear
    }
    
    // MARK: - Book Mark Event
    func bookMarkEvent() {
        self.pageView.favoriteBtnTapEvent
            .subscribe(onNext: { index in
                let BookMarkInfo = BookMarkInfo.shared
                //정보 저장 -> 객체에
                BookMarkInfo.id = self.mainModel[index].id
                BookMarkInfo.posterURL = self.mainModel[index].posterURL
                BookMarkInfo.title = self.mainModel[index].title
                //페이지가 로드될 때 observer 등록 -> 이벤트 발생 시 해당 Name으로 전달 
                NotificationCenter.default
                    .post(name: NSNotification.Name(rawValue: "favoriteBtnContextMenuClick"), object: nil)
            }).disposed(by: disposeBag)
        
        self.pageView.popularListContextMenuClickEvent
            .subscribe(onNext: { index in
                //싱글톤 객체 생성
                let BookMarkInfo = BookMarkInfo.shared
                //정보 저장 -> 객체에
                BookMarkInfo.id = self.popularModel[index].id
                BookMarkInfo.posterURL = self.popularModel[index].posterURL
                BookMarkInfo.title = self.popularModel[index].title
                //BookMarkController로 전달하기 위해
                NotificationCenter.default
                    .post(name: NSNotification.Name(rawValue: "popularListContextMenuClick"), object: nil)
            }).disposed(by: disposeBag)
        
        self.pageView.nowplayingListContextMenuClickEvent
            .subscribe(onNext: { index in
                //싱글톤 객체 생성
                let BookMarkInfo = BookMarkInfo.shared
                //정보 저장 -> 객체에
                BookMarkInfo.id = self.nowplayingModel[index].id
                BookMarkInfo.posterURL = self.nowplayingModel[index].posterURL
                BookMarkInfo.title = self.nowplayingModel[index].title
                NotificationCenter.default
                    .post(name: NSNotification.Name(rawValue: "nowplayingListContextMenuClick"), object: nil)
            }).disposed(by: disposeBag)
        
        self.pageView.topratedListContextMenuClickEvent
            .subscribe(onNext: { index in
                //싱글톤 객체 생성
                let BookMarkInfo = BookMarkInfo.shared
                //정보 저장 -> 객체에
                BookMarkInfo.id = self.topratedModel[index].id
                BookMarkInfo.posterURL = self.topratedModel[index].posterURL
                BookMarkInfo.title = self.topratedModel[index].title
                NotificationCenter.default
                    .post(name: NSNotification.Name(rawValue: "topratedListContextMenuClick"), object: nil)
            }).disposed(by: disposeBag)
        
        self.pageView.upcomingListContextMenuClickEvent
            .subscribe(onNext: { index in
                //싱글톤 객체 생성
                let BookMarkInfo = BookMarkInfo.shared
                //정보 저장 -> 객체에
                BookMarkInfo.id = self.upcomingModel[index].id
                BookMarkInfo.posterURL = self.upcomingModel[index].posterURL
                BookMarkInfo.title = self.upcomingModel[index].title
                NotificationCenter.default
                    .post(name: NSNotification.Name(rawValue: "upcomingListContextMenuClick"), object: nil)
            }).disposed(by: disposeBag)
    }
    
    func mainBannerBookMarkList(model: [BookMarkInfoModel]) {
        self.mainModel = model
    }
    
    func popularBookMarkList(model: [BookMarkInfoModel]) {
        self.popularModel += model
    }
    
    func nowplayingBookMarkList(model: [BookMarkInfoModel]) {
        self.nowplayingModel += model
    }
    
    func topratedBookMarkList(model: [BookMarkInfoModel]) {
        self.topratedModel += model
    }
    
    func upcomingBookMarkList(model: [BookMarkInfoModel]) {
        self.upcomingModel += model
    }
    
    //MARK: - Paging, CellClickEvent
    func pageEvent(){
        //자세히보기 이벤트 발생시 router 호출
        self.pageView.infoBtnTapEvent
            .subscribe(onNext: { (index) in
                self.router?.routeToMainBannerDetail(index: index)
            }).disposed(by: disposeBag)
        
        self.pageView.popularListNextEvent
            .subscribe(onNext: {
                self.requestPopularList(pageType: .next)
            })
            .disposed(by: self.disposeBag)
        
        self.pageView.popularListCellTapEvent
            .subscribe(onNext: { index in
                self.router?.routeToPopularDetail(index: index)
            }).disposed(by: self.disposeBag)
        
        
        self.pageView.nowplayingListNextEvent
            .subscribe(onNext: {
                self.requestNowPlayingList(pageType: .next)
            })
            .disposed(by: self.disposeBag)
        
        self.pageView.nowplayingListCellTapEvent
            .subscribe(onNext: { index in
                self.router?.routeToNowPlayingDetail(index: index)
            }).disposed(by: self.disposeBag)
        
        
        self.pageView.topratedListNextEvent
            .subscribe(onNext: {
                self.requestTopRatedList(pageType: .next)
            }).disposed(by: self.disposeBag)
        
        self.pageView.topratedListCellTapEvent
            .subscribe(onNext: { index in
                self.router?.routeToTopRatedDetail(index: index)
            }).disposed(by: self.disposeBag)
        
        
        self.pageView.upcomingListNextEvent
            .subscribe(onNext: {
                self.requestUpComingList(pageType: .next)
            }).disposed(by: self.disposeBag)
        
        self.pageView.upcomingListCellTapEvent
            .subscribe(onNext: { index in
                self.router?.routeToUpComingDetail(index: index)
            }).disposed(by: self.disposeBag)
    }
    
    //MARK: - request to interactor
    func requestAPI(){
        self.requestPopularList(pageType: .first)
        self.requestNowPlayingList(pageType: .first)
        self.requestTopRatedList(pageType: .first)
        self.requestUpComingList(pageType: .first)
    }
    
    func requestPopularList(pageType: Main.RequestPopularList.Request.PageType) {
        self.interactor?.requestPopularList(request: .init(pageType: pageType))
    }
    func displayPopularList(viewModel: Main.RequestPopularList.ViewModel) {
        self.pageView.displayPopularList(listModel: viewModel.listModel)
    }
    
    
    func requestNowPlayingList(pageType: Main.RequestNowPlayingList.Request.PageType){
        self.interactor?.requestNowPlayingList(requset: .init(pageType: pageType))
    }
    func displayNowPlayingList(viewModel: Main.RequestNowPlayingList.ViewModel){
        self.pageView.displayNowPlayingList(listModel: viewModel.listModel)
    }
    
    
    func requestTopRatedList(pageType: Main.RequestTopRatedList.Request.PageType){
        self.interactor?.requestTopRatedList(request: .init(pageType: pageType))
    }
    func displayTopRatedList(viewModel: Main.RequestTopRatedList.ViewModel) {
        self.pageView.displayTopRatedList(listModel: viewModel.listModel)
    }
    
    
    func requestUpComingList(pageType: Main.RequestUpComingList.Request.PageType){
        self.interactor?.requestUpComingList(request: .init(pageType: pageType))
    }
    func displayUpComingList(viewModel: Main.RequestUpComingList.ViewModel) {
        self.pageView.displayUpComingList(listModel: viewModel.listModel)
    }
}
