//
//  SearchInteractor.swift
//  cleanSwift
//
//  Created by 최민준(Minjun Choi) on 2021/08/10.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

protocol SearchBusinessLogic {
    func requestSearchList(request: Search.RequestSearchList.Request)
}

protocol SearchDataStore {
    var movieSearchResultList: [MovieSearchListDto.Result]? { get }
    var imageResourceUrl: String { get }
}

class SearchInteractor: SearchBusinessLogic, SearchDataStore {
    //MARK: - Properties
    var presenter: SearchPresentationLogic?
    let worker: SearchWorker = .init()
    
    var movieSearchResultList: [MovieSearchListDto.Result]?
    
    let imageResourceUrl: String = "https://image.tmdb.org/t/p/original"
    var searchListPageNum: Int = 1
    
    //MARK: - requestSearchList
    func requestSearchList(request: Search.RequestSearchList.Request){
        switch request.pageType {
        case .first:
            self.searchListPageNum = 1
            self.movieSearchResultList = []
        case .next:
            self.searchListPageNum += 1
        }
        var disposable: Disposable?
        disposable = self.worker.requestSearchList(pageNum: searchListPageNum, keyWord: request.keyWord)
            .subscribe(
                onSuccess: { dto in
                    disposable?.dispose()
                    self.movieSearchResultList?.append(contentsOf: dto.results ?? [])
                    self.presenter?.presentSearchList(response: .init(
                        imgResourceUrl: self.imageResourceUrl,
                        dto: dto
                    ))
                },
                onFailure: { error in
                    disposable?.dispose()
                })
    }
}
