//
//  SearchViewController.swift
//  cleanSwift
//
//  Created by 최민준(Minjun Choi) on 2021/08/10.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import RxCocoa

protocol SearchDisplayLogic: AnyObject {
    func displaySearchList(viewModel: Search.RequestSearchList.ViewModel)
}

class SearchViewController: UIViewController, SearchDisplayLogic{
    
    var pageView: SearchPageView { self.view as! SearchPageView }
    
    //MARK: - Properties
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?
    
    let disposeBag: DisposeBag = .init()
    
    var searchKeyword: String = ""
    
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Setup
    private func setup() {
        let viewController = self
        let interactor = SearchInteractor()
        let presenter = SearchPresenter()
        let router = SearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View lifecycle
    override func loadView() {
        self.view = SearchView.create()
        self.pageEvent()
        self.tapEvent()
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        requestSearchList(pageType: .first, keyWord: nil)
       
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        self.makeSearchBar()
        
        let navigationBarAppearance = UINavigationBarAppearance()
        navigationBarAppearance.backgroundColor = .black
        navigationBarAppearance.titleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor.white]
        navigationBarAppearance.largeTitleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor.white]
        navigationController?.navigationBar.prefersLargeTitles = false
        navigationController!.navigationBar.standardAppearance = navigationBarAppearance
        navigationController!.navigationBar.scrollEdgeAppearance = navigationBarAppearance
    }
    
    // MARK: - View Method
    //페이징 처리
    func pageEvent() {
        self.pageView.searchListNextEvent
            .subscribe(onNext: {
                //다음 페이지 요청 -> 이벤트를 받았을 때 원하는 로직 실행, 함수 실행 
                self.requestSearchList(pageType: .next, keyWord: self.searchKeyword)
            }) .disposed(by: self.disposeBag) // 끝난 후 메모리 해제
    }
    
    func tapEvent() {
        self.pageView.searchListCellTapEvent
            .subscribe(onNext: { index in
                self.router?.routeToSearchMovieDetail(index: index)
            }).disposed(by: self.disposeBag)
    }
    
    //MARK: - request to interactor 
    func requestSearchList(pageType: Search.RequestSearchList.Request.PageType, keyWord: String?) {
        self.interactor?.requestSearchList(request: .init(pageType: pageType, keyWord: keyWord))
    }
    
    func displaySearchList(viewModel: Search.RequestSearchList.ViewModel) {
        self.pageView.displaySearchList(listModel: viewModel.listModel)
    }
    
    // MARK: - UISearchController
    func makeSearchBar() {
        let searchController = UISearchController(searchResultsController: nil)
        searchController.searchBar.placeholder = "검색"
        //검색창 클릭 시 나머지 뷰들을 어둡게 할건지
        searchController.obscuresBackgroundDuringPresentation = true
        searchController.searchBar.delegate  = self
        
        self.navigationItem.searchController = searchController
        
        self.navigationItem.title = "영화 검색"
        //스크롤 시 searchBar를 숨기는지
        self.navigationItem.hidesSearchBarWhenScrolling = true 
    }
}

//MARK: - UISearchController SearchBar 클릭 시
extension SearchViewController: UISearchBarDelegate {
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        //search 버튼 클릭 시 text로 API 호출 
        guard let searchText = searchBar.text else { return }
        self.searchKeyword = searchText
        self.requestSearchList(pageType: .first, keyWord: searchText)
    }
}
